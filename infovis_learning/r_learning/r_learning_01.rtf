{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf200
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;\f2\froman\fcharset0 Times-Roman;
\f3\fswiss\fcharset0 ArialMT;\f4\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red92\green92\blue92;\red198\green196\blue191;\red26\green26\blue26;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10100\viewh14060\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 \
\

\fs48 \{ R - learning \}
\fs24 \
--------------------\
( 20131223 )\
\
\
\
\
various basic commands :) \
-----------------------------------\
\
x <- "variable for x";\
\
sum( 1, 2, 3 );\
\
help( sum );\
\
example( sum )\
\
rep( 1*2, times = 3 );\
\
x <- c(1,2,3)\
\
length(x)\
\
(range)\
5:9\
\
(same)\
\pard\pardeftab720\sl500
\cf0 seq(5, 9)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
( same, but with smaller steps )\
\pard\pardeftab720\sl480
\cf0 seq(\'a00,\'a09,\'a00.1\'a0)\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 x <- c( 0:10 )\
\
\
\pard\pardeftab720\sl500
\cf0 sentence <- c('walk', 'the', 'plank')\
sentence[3]\
sentence[3] <- "dog"\
sentence[4] <- "to"\
\
> sentence <- c( "one", "two", "three", "four")\
// show only elements 1>2\
> sentence[ c(1,2)]\
// or this way\
sentence[2:4]\
\
// set values in particular bits of the array/list\
sentence[5:7] <- c('the', "poop", "deck")\
\
//// set names for variables\
//  set up a variable array \
> ranks <- 1:3\
// assign it names\
> names(ranks) <- c("first", "second", "third")\
//  fetch via names\
ranks[ "first" ]\
// set via name\
ranks["third"] <- "third_two";\
\
\pard\pardeftab720\sl480
\cf0 \
\
///// vector math\
\
// make a vector \
\pard\pardeftab720\sl500
\cf0 a <- c(1, 2, 3)\
// increment \
\pard\pardeftab720\sl480
\cf0 // all the vector values by 1\
a + 1  ;\
// divide by 2\
a / 2 \
// multiply by 2 \
a * 2\
\
// add a vector to one another\
// create another vector\
b <- c(4, 5, 6)\
// add them \
a + b\
// subtract\
b - a\
//// COMPARE vectors\
// equals\
a == c(1, 99, 3 )\
// less than\
a < c(1, 99, 3 )\
//  also works on arrays\
sin(a)\
\
\
/// remove NA numbers when summing\
\pard\pardeftab720\sl500
\cf0 sum(a, na.rm = TRUE )\
\pard\pardeftab720\sl480
\cf0 \
\
//  get mean\
mean( array_of_data )\
// and median\
median( array_of_data )\
// standard deviation\
standardDeviation <- sd( array_of_data )\
\
\
\
////////  (ch 5) Factors\
\
//// find which items are in the data\
\
// enter items\
\pard\pardeftab720\sl500

\f1\fs30 \cf2 \cb3 > chests <- c('gold', 'silver', 'gems', 'gold', 'gems')\
// factor them\
> types <- factor(chests)
\f2\fs34 \cf4 \
\pard\pardeftab720\sl480

\f0\fs24 \cf0 \cb1 // list types\
\pard\pardeftab720\sl500

\f1\fs30 \cf2 \cb3 > print(types)\
[1] gold   silver gems   gold   gems  \
Levels: gems gold silver
\f2\fs34 \cf4 \
\pard\pardeftab720\sl480

\f0\fs24 \cf0 \cb1 //  the above lists the array items (1st line) and the unique items ( line2 )\
// - each item in the levels becomes an object, with a related integer\
//    converting the data using as.integer, shows the unique values\
\pard\pardeftab720\sl500

\f1\fs30 \cf2 \cb3 > as.integer(types)\
[1] 2 3 1 2 1
\f2\fs34 \cf4 \
\pard\pardeftab720\sl480

\f0\fs24 \cf0 \cb1 //  get the levels directly \
levels( types )\
\
\
\
\pard\pardeftab720\sl500
\cf0 ///////// plotting\
// make a vector\
> vesselsSunk <- c(4, 5, 1)\
// plot it\
> barplot(vesselsSunk)\
\
// assign the vector values names\
names(vesselsSunk) <- c("England", "France", "Norway");\
// plot again \
barplot(vesselsSunk)\
\
// or you could just plot a range like this:\
\pard\pardeftab720\sl480
\cf0 barplot(\'a0seq(1\'ad,10,0.25)\'a0);\
\
/////  scatter plot\
// make the relevant arrays\
\pard\pardeftab720\sl500
\cf0 > x <- seq(1, 20, 0.1)\
> y <- sin(x)\
\pard\pardeftab720\sl480
\cf0 //  plot them\
plot( x, y )\
\
\pard\pardeftab720\sl500
\cf0 > values <- -10:10\
> absolutes <- abs(values)\
> plot(values, absolutes)\
\pard\pardeftab720\sl480
\cf0 \
\pard\pardeftab720\sl500
\cf0 // regular barplot\
barplot( data_array )\
// add vertical or horizontal line\
( here a horizontal one )\
abline( h = mean(data_array) )\
\
\pard\pardeftab720\sl480
\cf0 \
//  2 dimensional points plot\
\pard\pardeftab720\sl500

\f1\fs30 \cf2 \cb3 > weights <- c(300, 200, 100, 250, 150)\
> prices <- c(9000, 5000, 12000, 7500, 18000)\
> plot(weights, prices)
\f2\b\fs34 \cf4 \
\pard\pardeftab720\sl480

\f0\b0\fs24 \cf0 \cb1 \
\
\
\
////////////  matricies \
\pard\pardeftab720\sl500
\cf0 // make a matrix with 3 by 4 with all elements as 0 \
matrix( 0, 3, 4 )\
\
// fill a matrix with a sequence/lists'/arrays' values\
a <- 1:12\
matrix( a, 3, 4 )\
// or a continuous 1->25 matrix\
matrix( 1:25, 5, 5)\
\
\
//  reshape a matrix/array\
// make an array\
plank <- 1:8\
dim( plank ) <- c( 2, 4)\
\
// fetching matrix values\
// from the second *row* and the third *column*\
plank[2, 3]\
\
// show the entire second row\
plank[2,]\
// or the entire fourth column\
plank[ , 4]\
// use a sequence to fetch particular columns/rows\
// eg the the 2->4 columns\
plank[, 2:4]\
\
\
///// matrix plotting\
\
// create some data\
elevation <- matrix( 1, 10, 10 )     // a matrix of ones\
\pard\pardeftab720\sl500

\f1\fs30 \cf2 \cb3 elevation[4,6] <- 0   // with a dip in it 
\f2\fs34 \cf4 \
\pard\pardeftab720\sl500

\f0\fs24 \cf0 \cb1 \
// plot the countour\
contour( elevation )\
// and a 3d view \
persp( elevation )\
// and zoom out\
persp( elevation, expand=0.2 )\
\
//  and with a more advanced dataset ( which comes with R )\
contour( volcano )\
//  3d\
persp( volcano, expand=0.2 )\
//  heatmap\
image( volcano )\
\
\
\
\
//////////////   data frames\
//  objects with data? \
\
// make  data.frame\
\pard\pardeftab720\sl500

\f1\fs30 \cf2 \cb3 > weights <- c(300, 200, 100, 250, 150)\
> prices <- c(9000, 5000, 12000, 7500, 18000)\
> chests <- c('gold', 'silver', 'gems', 'gold', 'gems')\
> types <- factor( chests )
\f0\fs24 \cf0 \cb1 \
\pard\pardeftab720\sl500

\f1\fs30 \cf2 \cb3 > treasure <- data.frame( weights, prices, types )
\f2\fs34 \cf4 \
\pard\pardeftab720\sl500

\f0\fs24 \cf0 \cb1 //  print the results\
\pard\pardeftab720\sl500

\f1\fs30 \cf2 \cb3 > print( treasure )\
  weights prices  types\
1     300   9000   gold\
2     200   5000 silver\
3     100  12000   gems\
4     250   7500   gold\
5     150  18000   gems
\f2\fs34 \cf4 \
\pard\pardeftab720\sl500

\f0\fs24 \cf0 \cb1 //  data access\
//  one way\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl500
\ls1\ilvl0
\f1\fs30 \cf2 \cb3 > treasure[[2]]\
[1]  9000  5000 12000  7500 18000\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl500
\ls1\ilvl0
\f3\fs34 \cf4 // and a different way	
\f4 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl500
\ls1\ilvl0
\f1\fs30 \cf2 \cb3 > treasure[["weights"]]\
[1] 300 200 100 250 150\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl500
\ls1\ilvl0
\f4\fs34 \cf4 // and doing it without all the brackets\
\pard\pardeftab720\sl500
\ls1\ilvl0
\f1\fs30 \cf2 \cb3 > treasure$prices\
[1]  9000  5000 12000  7500 18000\uc0\u8232 > treasure$types\
[1] gold   silver gems   gold   gems  \
Levels: gems gold silver\
\pard\pardeftab720\sl500
\ls1\ilvl0
\f4\fs34 \cf4 \cb1 	\uc0\u8232 
\f3 //  loading data frames (i.e. loading data)\
\
// listing files\
list.files()\
// a prepared file looks like this ('targets.csv'):\
\pard\pardeftab720\sl500
\ls1\ilvl0
\f1\fs30 \cf2 \cb3 "Port","Population","Worth"\
"Cartagena",35000,10000\
"Porto Bello",49000,15000\
"Havana",140000,50000\
"Panama City",105000,35000
\f3\fs34 \cf4 \cb1 \
\pard\pardeftab720\sl500

\f0\fs24 \cf0 //  load the data\
read.csv("targets.csv")\
//  a different file - "infantry.txt" - but with tab separators, looks like this:\
\pard\pardeftab720\sl500

\f1\fs30 \cf2 \cb3 Port         Infantry\
Porto Bello  700\
Cartagena    500\
Panama City  1500\
Havana       2000
\f2\fs34 \cf4 \
\pard\pardeftab720\sl500

\f0\fs24 \cf0 \cb1 // load the file as a data frame, but with tab separators\
read.csv("infantry.txt", sep="\\t")\
\pard\pardeftab720\sl500

\f1\fs30 \cf2 \cb3 > read.table("infantry.txt", sep="\\t")\
           V1       V2\
1        Port Infantry\
2 Porto Bello      700\
3   Cartagena      500\
4 Panama City     1500\
5      Havana     2000
\f2\fs34 \cf4 \
\pard\pardeftab720\sl500

\f0\fs24 \cf0 \cb1 // NOTE that the first column is treated as data, rather than a header\
// this can be fixed by loading the file comme ca:\
\pard\pardeftab720\sl500

\f1\fs30 \cf2 \cb3 read.table\'ad("infantry\'ad.txt",\'a0sep="\'ad\\t",\'a0heade\'adr=TRUE)\
\pard\pardeftab720\sl500

\f0\fs24 \cf0 \cb1 \
// merging data frames\
\pard\pardeftab720\sl500

\f1\fs30 \cf2 \cb3 > targets <- read.csv("targets.csv")\
> infantry <- read.table("infantry.txt", sep="\\t", header=TRUE)\
> merge(x = targets, y = infantry)\
         Port Population Worth Infantry\
1   Cartagena      35000 10000      500\
2      Havana     140000 50000     2000\
3 Panama City     105000 35000     1500\
4 Porto Bello      49000 15000      700
\f2\fs34 \cf4 \
\pard\pardeftab720\sl500

\f0\fs24 \cf0 \cb1 \
\
\
/////////////   real world data testing\
\
// got a file ("piracy.csv")\
\pard\pardeftab720\sl500

\f1\fs30 \cf2 \cb3 Country,Piracy\
Australia,23\
Bangladesh,90\
Brunei,67\
China,77\
...
\f2\fs34 \cf4 \
\pard\pardeftab720\sl500

\f0\fs24 \cf0 \cb1 // got another file with the gdp per country ( "gdp.txt")\
\pard\pardeftab720\sl500

\f1\fs30 \cf2 \cb3 Rank    Country        GDP\
1       Liechtenstein  141100\
2       Qatar          104300\
3       Luxembourg     81100\
4       Bermuda        69900\
...
\f2\fs34 \cf4 \
\pard\pardeftab720\sl500

\f0\fs24 \cf0 \cb1 //  read files\
\pard\pardeftab720\sl500

\f1\fs30 \cf2 \cb3 > piracy <- read.csv("piracy.csv")
\f2\fs34 \cf4 \

\f1\fs30 \cf2 > gdp <- read.table("gdp.txt", sep="  ", header=TRUE)
\f2\fs34 \cf4 \
\pard\pardeftab720\sl500

\f0\fs24 \cf0 \cb1 //   merge the two\
\pard\pardeftab720\sl500

\f1\fs30 \cf2 \cb3 countries <- merge(x = gdp, y = piracy)
\f2\fs34 \cf4 \
\pard\pardeftab720\sl500

\f0\fs24 \cf0 \cb1 \
// plot elements of the countries table\
\pard\pardeftab720\sl500

\f1\fs30 \cf2 \cb3 plot( countries$GDP, countries$Piracy)
\f2\fs34 \cf4 \
\pard\pardeftab720\sl500

\f0\fs24 \cf0 \cb1 \
//  try a correlation test\
//  the p value is the post important . if it's less than 0.05 then there's a correlation\
\pard\pardeftab720\sl500

\f1\fs30 \cf2 \cb3 > cor.test( countries$GDP, countries$Piracy )\
\
	Pearson's product-moment correlation\
\
data:  countries$GDP and countries$Piracy \
t = -14.8371, df = 107, p-value < 2.2e-16\
alternative hypothesis: true correlation is not equal to 0 \
95 percent confidence interval:\
 -0.8736179 -0.7475690 \
sample estimates:\
       cor \
-0.8203183 
\f2\fs34 \cf4 \
\pard\pardeftab720\sl500

\f0\fs24 \cf0 \cb1 \
\
}